#!/usr/bin/perl

use strict;
use warnings;
use 5.010;

use Net::LastFM;
use JSON;
use Data::Dumper;
use XML::Feed;
use DateTime;

my $config_json = do { local $/; <DATA> };
my $config      = JSON->new->decode($config_json);

my $user = shift // $config->{feed_default_user};

$config->{$_} =~ s/\{user}/$user/g for keys %$config;

my $lastfm = Net::LastFM->new(
    api_key    => $ENV{LASTFM_API_KEY},
    api_secret => $ENV{LASTFM_SECRET},
);

my $now = DateTime->now();

my $feed = XML::Feed->new('Atom');
$feed->title("Last.FM Recent Tracks for $user");
$feed->link("https://last.fm/user/$user");
$feed->id("https://last.fm/user/$user");
$feed->self_link($config->{feed_default_user});
$feed->modified($now);

my $data = $lastfm->request_signed(
  method => 'user.getRecentTracks',
  user   => $user,
);

unless ($data) {
  warn "No data returned. Exiting.\n";
  exit 1;
}

my $i = 0;
for (@{$data->{recenttracks}{track}}) {
  # Skip currently playing track
  next if ($_->{'@attr'}{nowplaying} // '') eq 'true';

  my $entry = XML::Feed::Entry->new('Atom');
  $entry->title("$_->{name} - $_->{artist}{'#text'}");
  $entry->summary("$_->{name} - $_->{artist}{'#text'}");
  $entry->link($_->{url});
  if (defined $_->{date}{uts}) {
    $entry->modified(DateTime->from_epoch(epoch => $_->{date}{uts}));
  } else {
    # Hacky hack is hacky!
    $entry->modified(DateTime->now);
  } 
  $entry->author($_->{artist}{'#text'});
  $entry->id($config->{feed_mb_id} =~ s/\{mbid}/$_->{mbid}/gr);
  $feed->add_entry($entry);
  last if $i++ == 10;
}

say $feed->as_xml;

__DATA__
{
"feed_default_user": "davorg",
"feed_title": "Last.FM Recent Tracks for {user}",
"feed_link": "https://last.fm/user/{user}",
"feed_id": "https://last.fm/user/{user}",
"feed_self_link": "http://dave.org.uk/feed-data/lastfm.xml",
"feed_mb_id": "https://musicbrainz.org/recording/{mbid}"
}
